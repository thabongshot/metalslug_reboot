#version 410 core

const int MAX_POINT_LIGHTS = 4;
const int MAX_SPOT_LIGHTS = 4;

in vec2 texCoord0;
in vec3 normal0;
in vec3 worldPos0;

layout (location = 0) out vec4 finalColor0;

struct BaseLight
{
	vec3 Color;
	float Intensity;
};

struct DirectionalLight
{
	BaseLight Base;
	vec3 Direction;
};

struct Attenuation
{
	float Constant;
	float Linear;
	float Exponent;
};

struct PointLight
{
	BaseLight Base;
	Attenuation Atten;
	vec3 Position;
	float Range;
};

struct SpotLight
{
	PointLight PointLight;
	vec3 Direction;
	float Cutoff;
};

uniform vec3 baseColor;
uniform vec3 ambientLight;
uniform sampler2D sampler;

uniform vec3 eyePos;
uniform float specularIntensity;
uniform float specularPower;

uniform DirectionalLight directionalLight;
uniform PointLight pointLights[MAX_POINT_LIGHTS];
uniform SpotLight spotLights[MAX_SPOT_LIGHTS];

vec4 CalcLight(BaseLight Base, vec3 Direction, vec3 Normal)
{
	float DiffuseFactor = dot(Normal, -Direction);
	vec4 DiffuseColor = vec4(0, 0, 0, 0);
	vec4 SpecularColor = vec4(0, 0, 0, 0);
	
	if(DiffuseFactor > 0)
	{
		DiffuseColor = vec4(Base.Color, 1.0f) * Base.Intensity * DiffuseFactor;
		
		vec3 DirectionToEye = normalize(eyePos - worldPos0);
		vec3 ReflectDirection = normalize(reflect(Direction, Normal));
		
		float SpecularFactor = dot(DirectionToEye, ReflectDirection);
		SpecularFactor = pow(SpecularFactor, specularPower);
		
		if(SpecularFactor > 0)
		{
			SpecularColor = vec4(Base.Color, 1.0) * specularIntensity * SpecularFactor;
		}
	}
	
	return DiffuseColor + SpecularColor;
}

vec4 CalcDirectionalLight(DirectionalLight Light, vec3 Normal)
{
	return CalcLight(Light.Base, -Light.Direction, Normal);
}

vec4 CalcPointLight(PointLight pointLight, vec3 Normal)
{
	vec3 lightDirection = worldPos0 - pointLight.Position;
	float distanceToPoint = length(lightDirection);
	
	if(distanceToPoint > pointLight.Range)
		return vec4(0, 0, 0, 0);
	
	lightDirection = normalize(lightDirection);
	
	vec4 color = CalcLight(pointLight.Base, lightDirection, Normal);
	
	float attenuation = pointLight.Atten.Constant +
						pointLight.Atten.Linear * distanceToPoint + 
						pointLight.Atten.Exponent * distanceToPoint * distanceToPoint +
						0.0001;
						
	return color / attenuation;
}

vec4 CalcSpotLight(SpotLight SpotLight, vec3 Normal)
{
	vec3 lightDirection = normalize(worldPos0 - SpotLight.PointLight.Position);
	float spotFactor = dot(lightDirection, SpotLight.Direction);
	
	vec4 color = vec4(0, 0, 0, 0);
	
	if(spotFactor > SpotLight.Cutoff)
	{
		color = CalcPointLight(SpotLight.PointLight, Normal) * 
				(1.0 - (1.0 - spotFactor) / (1.0 - SpotLight.Cutoff));
	}
	
	return color;
}

void main()
{
	vec4 totalLight = vec4(ambientLight, 1);
	
	vec4 color = vec4(baseColor, 1);

	vec4 textureColor = texture(sampler, texCoord0.xy);

	if(textureColor != vec4(0, 0, 0, 0))
		color *= textureColor;
	
	vec3 normal = normalize(normal0);
	
	totalLight += CalcDirectionalLight(directionalLight, normal);
	
	for(int i = 0; i < MAX_POINT_LIGHTS; i++)
	{
		if(pointLights[i].Base.Intensity > 0)
			totalLight += CalcPointLight(pointLights[i], normal);
	}
	
	for(int i = 0; i < MAX_SPOT_LIGHTS; i++)
	{
		if(spotLights[i].PointLight.Base.Intensity > 0)
			totalLight += CalcSpotLight(spotLights[i], normal);
	}

	finalColor0 = color * totalLight;
}